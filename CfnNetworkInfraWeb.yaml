AWSTemplateFormatVersion: 2010-09-09
Description: Cfn Template for Base VPC Configuration
Transform: AWS::LanguageExtensions
Mappings:
  # Public Subnets designate the ALB AZs to use on
  # backend registered private targets, so all are
  # required.  This will use the first 3 AZs that
  # are in alphabetical order returned from the
  # intrinsic function GetAZs.
  SubnetParameters:
    Public:
      MapIpv4: True
    Private:
      MapIpv4: False
  SubnetA:
    Public:
      Cidr: 10.0.1.0/24
      AZ: 0
    Private:
      Cidr: 10.0.4.0/24
      AZ: 0
  SubnetB:
    Public:
      Cidr: 10.0.2.0/24
      AZ: 1
    Private:
      Cidr: 10.0.5.0/24
      AZ: 1
  SubnetC:
    Public:
      Cidr: 10.0.3.0/24
      AZ: 2
    Private:
      Cidr: 10.0.6.0/24
      AZ: 2
Resources:
  # VPC & Subnet Creation
  WebInfraProductionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: WebInfraProductionVpc
  Fn::ForEach::Subnets:
    - SubnetIdentifier
    - [SubnetA, SubnetB, SubnetC]
    - Fn::ForEach::SubnetAvailability:
      - Availability
      - [Public, Private]
      - 'WebInfraProduction${Availability}${SubnetIdentifier}':
          Type: AWS::EC2::Subnet
          Properties:
            VpcId: !Ref WebInfraProductionVPC
            CidrBlock: !FindInMap 
              - !Ref SubnetIdentifier
              - !Ref Availability
              - Cidr
            AvailabilityZone: !Select [ Fn::FindInMap: [ !Ref SubnetIdentifier, !Ref Availability, AZ ], Fn::GetAZs: !Ref AWS::Region ]
            MapPublicIpOnLaunch: !FindInMap 
              - SubnetParameters
              - !Ref Availability
              - MapIpv4
            Tags:
              - Key: Name
                Value: !Sub "WebInfraProduction${Availability}${SubnetIdentifier}"
  # Route Table Creation & Subnet Association
  WebInfraProductionPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WebInfraProductionVPC
      Tags:
        - Key: Name
          Value: !Sub "WebInfraProductionPublicRouteTable"
  WebInfraProductionPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WebInfraProductionVPC
      Tags:
        - Key: Name
          Value: !Sub "WebInfraProductionPrivateRouteTable"
  Fn::ForEach::RouteTableAssociation:
    - SubnetIdentifier
    - [SubnetA, SubnetB, SubnetC]
    - Fn::ForEach::SubnetAvailability:
      - Availability
      - [Public, Private]
      - 'WebInfraProduction${Availability}${SubnetIdentifier}RouteTableAssociation':
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
            RouteTableId: !Ref
              'Fn::Sub': 'WebInfraProduction${Availability}RouteTable'
            SubnetId: !Ref
              'Fn::Sub': 'WebInfraProduction${Availability}${SubnetIdentifier}'
  # IGW/NAT Gateway Creation and Association with VPC
  WebInfraProductionPublicIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: WebInfraProductionPublicIGW
  WebInfraProductionPublicIGWAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref WebInfraProductionPublicIGW
      VpcId: !Ref WebInfraProductionVPC
  WebInfraProductionNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: WebInfraProductionNATGatewayEIP
  WebInfraProductionPublicNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt WebInfraProductionNATGatewayEIP.AllocationId
      SubnetId: !Ref WebInfraProductionPrivateSubnetA
      Tags:
        - Key: Name
          Value: WebInfraProductionPublicNATGateway
  # Route Creation for NAT Egress and IGW Ingress/Egress Routes
  WebInfraProductionRouteNATGateway:
    Type: AWS::EC2::Route
    DependsOn: WebInfraProductionPublicNATGateway
    Properties:
      RouteTableId: !Ref WebInfraProductionPrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref WebInfraProductionPublicNATGateway
  WebInfraProductionRouteIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WebInfraProductionPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref WebInfraProductionPublicIGW
Outputs:
  # Assume creation of VPC/Subnets is static and
  # reduce template length by exporting values needed
  # to standup resources in the VPC.
  WebInfraProductionVpcId:
    Description: VPC ID of Web Infra
    Value: !Ref WebInfraProductionVPC
    Export: 
      Name: !Sub "${AWS::StackName}-WebInfraProductionVpcId"
  Fn::ForEach::OutputSubnets:
    - SubnetIdentifier
    - [SubnetA, SubnetB, SubnetC]
    - Fn::ForEach::OutputSubnetAvailability:
      - Availability
      - [Public, Private]
      - 'WebInfraProduction${Availability}${SubnetIdentifier}Id':
          Description: !Sub "${Availability} ${SubnetIdentifier} Subnet ID"
          Value: !Ref
            'Fn::Sub': 'WebInfraProduction${Availability}${SubnetIdentifier}'
          Export: 
            Name: !Sub "${AWS::StackName}-WebInfraProduction${Availability}${SubnetIdentifier}Id"